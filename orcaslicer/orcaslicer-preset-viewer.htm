<!DOCTYPE html>
<!--
Web page to help view contents of exported OrcaSlicer Preset contents (configuration settings),

RESOURCES:
- OrcaSlicer https://github.com/SoftFever/OrcaSlicer
- Convert OrcaSlicer GUI creation cpp code to JSON graph for transforming/rendering preset data.
  - https://chatgpt.com/share/67c785ed-8908-800b-8f8e-e4d7a12d994c 
- Chat to create Web Page with drag drop zip, content preview, etc...
  https://chatgpt.com/share/67c7db6a-29f8-800b-8ebb-5e7342dce81a
-->
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>OrcaSlicer Preset View 'n Diff</title>
  <!-- Load Roboto font from Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
      
  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      height: 100vh;
      overflow: hidden;
    }
    #container {
      display: flex;
      height: 100%;
    }
    /* Sidebar styles */
    #sidebar {
      width: 300px;
      min-width: 20%;
      border-right: 1px solid #ccc;
      padding: 10px;
      box-sizing: border-box;
      overflow-y: auto;
    }
    #drop-area {
      border: 2px dashed #aaa;
      border-radius: 0.5em;
      padding: 20px;
      text-align: center;
      color: #666;
      margin-bottom: 10px;
      position: relative;
    }

    #drop-area:hover {
      border-color: #6ec8d6;
      background-color: #f1fafc;
    }

    /* Tooltip element hidden by default */
    #drop-area .tooltip-content {
      display: none;
      position: absolute;
      top: 100%; /* position below the drop area */
      left: 0%;
      background: #E5F8FB;/* rgba(0, 0, 0, 0.75);*/
      color: #000;
      padding: 5px;
      border-radius: 0.5em;
      z-index: 1000;
      border: 2px solid #00B8D4;
      /*white-space: nowrap;*/
      font-size: 0.9em; /* adjust font size if needed */
    }

    /* Show tooltip on hover */
    #drop-area:hover .tooltip-content {
      display: block;
    }

    /* File tree styles */
    #file-tree ul {
      list-style-type: none;
      padding-left: 20px;
      margin: 0;
    }
    #file-tree li {
      cursor: pointer;
      margin: 4px 0;
    }
    /* Default folder and file icons (if not using new icons) */
    #file-tree li.folder > span:first-child {
      /* Folder icon already provided below */
    }
    #file-tree li.file > span:nth-child(2) {
      /* File icon already provided below */
    }
    #file-tree li.collapsed > ul {
      display: none;
    }
    #file-tree li.selected {
      background-color: #e0e0e0;
    }
    /* Main content area */
    #main {
      flex-grow: 1;
      padding: 10px;
      box-sizing: border-box;
      overflow: hidden;
    }
    #file-content {
      height: 100%;
      border: 1px solid #ddd;
      box-sizing: border-box;
    }
    /* Split view styles */
    #split-view {
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    #top-pane, #bottom-pane {
      overflow: auto;
    }
    #splitter {
      height: 5px;
      background: #ccc;
      cursor: row-resize;
    }
    #file-content pre {
      background: #f4f4f4;
      padding: 10px;
      margin: 0;
      border-radius: 4px;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    #file-content img {
      max-width: 100%;
      height: auto;
    }
    .underline {
      text-decoration: underline;
      text-decoration-color: #009688;
      text-decoration-thickness: 0.2em;  /* Medium thickness */
      text-underline-offset: 0.35em;      /* Adjust this value to lower the underline */
    }
    .zip-root {
      list-style-type: none;
    }

    @keyframes pulsate {
      0% {
        /* transform: scale(1) rotate(0deg); */
        box-shadow: 0 0 0 0 rgba(0,150,136, 0.7);
        filter: hue-rotate(0deg) brightness(1);
        background: rgba(0,150,136,0.1);
        font-weight: bold;
      }
      25% {
        /* transform: scale(1.05) rotate(1deg); */
        box-shadow: 0 0 15px 5px rgba(0,150,136, 0.5);
        filter: hue-rotate(30deg) brightness(1.3);
        background: rgba(0,150,136,0.15);
        font-weight: bold;
      }
      50% {
        /* transform: scale(0.95) rotate(-1deg); */
        box-shadow: 0 0 30px 10px rgba(0,150,136, 0.3);
        filter: hue-rotate(60deg) brightness(0.9);
        background: rgba(0,150,136,0.05);
        font-weight: bold;
      }
      75% {
        /* transform: scale(1.05) rotate(1deg); */
        box-shadow: 0 0 15px 5px rgba(0,150,136, 0.5);
        filter: hue-rotate(30deg) brightness(1.3);
        background: rgba(0,150,136,0.15);
        font-weight: bold;
      }
      100% {
        /* transform: scale(1) rotate(0deg); */
        box-shadow: 0 0 0 0 rgba(0,150,136, 0.7);
        filter: hue-rotate(0deg) brightness(1);
        background: rgba(0,150,136,0.1);
        font-weight: bold;
      }
    }
    .pulsate {
      animation: pulsate 3s infinite ease-in-out;
    } 

  </style>
</head>
<body>
  <div id="container">
    <!-- Sidebar: Drop area and file tree -->
    <div id="sidebar">
      <div id="drop-area">
        Click, or Drag &amp; Drop .3mf or .zip.
        <div class="tooltip-content">
          Drop .3mf file(s), or Preset Bundle(s) here.  Export Presets from OrcaSlicer via <i>File</i> menu => <i>Export</i> => <i>Export Preset Bundle</i>
        </div>
      </div>
      <input type="file" id="fileInput" accept=".3mf,.zip,.orca_printer,.orca_filament" style="display:none;" multiple>
      <div id="file-tree"></div>
    </div>
    <!-- Main content area -->
    <div id="main">
      <div id="file-content">
        File content will appear here when you select a file.
      </div>
    </div>
  </div>

  <!-- Include JSZip from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
  <script>
    let _pulseAnimation = "pulsate"; // "pulsate";

    // Global variables (modified)
    // Removed currentZip and replaced with an array of zipFiles, plus selected and checked file state.
    let zipFiles = []; // Array of { id, name, zip, tree }
    let selectedFile = null; // Object: { zipId, filePath }
    let checkedFiles = {}; // Keyed by "zipId:filePath"
    let zipIdCounter = 1; // Unique id for each dropped zip

    // DOM references.
    const dropArea = document.getElementById('drop-area');
    const fileTreeDiv = document.getElementById('file-tree');
    const fileContentDiv = document.getElementById('file-content');
    const fileInput = document.getElementById('fileInput');

    // Prevent default behaviors for drag events.
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, e => {
        e.preventDefault();
        e.stopPropagation();
      });
    });

    // Highlight drop area on dragover.
    dropArea.addEventListener('dragover', () => {
      dropArea.style.backgroundColor = '#f0f0f0';
    });
    dropArea.addEventListener('dragleave', () => {
      dropArea.style.backgroundColor = '';
    });

    // When the drop area is clicked, trigger the file input.
    dropArea.addEventListener('click', function() {
      fileInput.click();
    });

    // Handle file drop.
    dropArea.addEventListener('drop', e => {
      dropArea.style.backgroundColor = '';
      const files = e.dataTransfer.files;
      if (files.length) {
        // Process each dropped file (append new zip files instead of replacing)
        for (let file of files) {
          /* Enable non .zip named files like orca_printer and .3mf
          if (!file.name.endsWith('.zip')) {
            alert("Please drop a ZIP file.");
            continue;
          }
          */
          const reader = new FileReader();
          reader.onload = function(evt) {
            JSZip.loadAsync(evt.target.result)
              .then(zip => {
                // Create unique id and build tree.
                let zipId = zipIdCounter++;
                let tree = buildFileTree(zip);
                // Store in global array.
                zipFiles.push({ id: zipId, name: file.name, zip: zip, tree: tree });
                // Append new zip root node to the file tree without clearing existing nodes.
                let zipRootNode = renderZipRoot(zip, zipId, file.name);
                fileTreeDiv.appendChild(zipRootNode);
                // Automatically select and check project_settings.config if found.
                autoSelectProjectSettings(tree, zipId);
                
                // Remove glow once a file is added
                updateDropAreaGlow(); 
              })
              .catch(err => {
                alert("Error reading ZIP file: " + err);
              });
          };
          reader.readAsArrayBuffer(file);
        }
      }
    });

    // Handle file selection from the file input.
    fileInput.addEventListener('change', function(e) {
      const files = e.target.files;
      if (files.length) {
        // Process each selected file (using the same logic as the drop event)
        for (let file of files) {
          const reader = new FileReader();
          reader.onload = function(evt) {
            JSZip.loadAsync(evt.target.result)
              .then(zip => {
                let zipId = zipIdCounter++; // Unique id for the zip
                let tree = buildFileTree(zip);
                zipFiles.push({ id: zipId, name: file.name, zip: zip, tree: tree });
                let zipRootNode = renderZipRoot(zip, zipId, file.name);
                fileTreeDiv.appendChild(zipRootNode);
                autoSelectProjectSettings(tree, zipId);

                // Remove glow once a file is added
                updateDropAreaGlow();                 
              })
              .catch(err => {
                alert("Error reading ZIP file: " + err);
              });
          };
          reader.readAsArrayBuffer(file);
        }
      }
    });

    // Build a nested tree object from the zip entries.
    function buildFileTree(zip) {
      const tree = {};
      Object.keys(zip.files).forEach(filePath => {
        const parts = filePath.split('/').filter(part => part);
        let current = tree;
        parts.forEach((part, index) => {
          if (!current[part]) {
            current[part] = { __children: {}, __file: null };
          }
          if (index === parts.length - 1) {
            current[part].__file = zip.files[filePath];
          }
          current = current[part].__children;
        });
      });
      return tree;
    }

    // New function: Automatically select and check project_settings.config in a newly dropped zip.
    function autoSelectProjectSettings(tree, zipId, pathPrefix = "") {
      Object.keys(tree).forEach(key => {
        let node = tree[key];
        let fullPath = (pathPrefix ? pathPrefix : "") + key;
        if (key === "project_settings.config" && node.__file && !node.__file.dir) {
          // Find the corresponding li element and auto-check/select it.
          // Because the tree is rendered asynchronously, delay the lookup.
          setTimeout(() => {
            let selector = `li.file[data-zip-id="${zipId}"][data-file-path="${fullPath}"]`;
            let li = document.querySelector(selector);
            if (li) {
              // Check the checkbox.
              let checkbox = li.querySelector('input[type="checkbox"]');
              if (checkbox && !checkbox.checked) {
                checkbox.checked = true;
                let fileId = zipId + ":" + fullPath;
                checkedFiles[fileId] = { zipId: zipId, filePath: fullPath };
              }
              // Also mark as selected.
              document.querySelectorAll('#file-tree li.selected').forEach(el => el.classList.remove('selected'));
              li.classList.add('selected');
              selectedFile = { zipId: zipId, filePath: fullPath };
              updateContentView();
            }
          }, 100);
        }
        // Recurse into folders.
        if (node.__children && Object.keys(node.__children).length > 0) {
          autoSelectProjectSettings(node.__children, zipId, fullPath + "/");
        }
      });
    }

    // New function: Render zip file root node with delete button and zip icon.
    function renderZipRoot(zipObj, zipId, zipName) {
      let li = document.createElement('li');
      li.classList.add('zip-root');
      li.dataset.zipId = zipId;
      // Delete emoji button.
      let deleteBtn = document.createElement('span');
      deleteBtn.textContent = "❌"; // delete button
      deleteBtn.style.cursor = "pointer";
      deleteBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        removeZip(zipId);
      });
      li.appendChild(deleteBtn);
      // Zip/package icon for collapse/expand.
      let zipIcon = document.createElement('span');
      zipIcon.textContent = "📦"; // zip icon
      zipIcon.style.cursor = "pointer";
      zipIcon.addEventListener('click', function(e) {
        e.stopPropagation();
        let ul = li.querySelector('ul');
        if (ul) {
          ul.style.display = (ul.style.display === 'none') ? 'block' : 'none';
        }
      });
      li.appendChild(zipIcon);
      // Zip file name.
      let nameSpan = document.createElement('span');
      nameSpan.textContent = " " + zipName;
      li.appendChild(nameSpan);
      // Append the file tree for this zip.
      let treeUL = renderTree(zipObj ? zipFiles.find(z => z.id === zipId).tree : {}, null, "", zipId);
      li.appendChild(treeUL);
      return li;
    }

    // Modified renderTree: now accepts an extra parameter "zipId" and adds checkboxes for file nodes.
    function renderTree(tree, container, pathPrefix, zipId) {
      const ul = document.createElement('ul');
      Object.keys(tree).forEach(key => {
        const li = document.createElement('li');

        // New styles to force nowrap and ellipsis for folder and file items
        li.style.whiteSpace = "nowrap";
        li.style.overflow = "hidden";
        li.style.textOverflow = "ellipsis";
        li.title = key; // Set title attribute for native tooltip

        const node = tree[key];
        const isFolder = Object.keys(node.__children).length > 0;
        if (isFolder) {
          li.classList.add('folder');
          // Folder icon.
          let folderIcon = document.createElement('span');
          folderIcon.textContent = "📁 ";
          folderIcon.style.cursor = "pointer";
          folderIcon.addEventListener('click', function(e) {
            e.stopPropagation();
            li.classList.toggle('collapsed');
          });
          li.appendChild(folderIcon);
          // Folder name.
          let nameSpan = document.createElement('span');
          nameSpan.textContent = key;
          li.appendChild(nameSpan);
        } else if (node.__file && !node.__file.dir) {
          li.classList.add('file');
          li.dataset.filePath = (pathPrefix ? pathPrefix : "") + key;
          li.dataset.zipId = zipId;
          // Add checkbox for file selection.
          let checkbox = document.createElement('input');
          checkbox.type = "checkbox";
          checkbox.addEventListener('click', function(e) {
            e.stopPropagation();
            let fileId = zipId + ":" + li.dataset.filePath;
            if (checkbox.checked) {
              checkedFiles[fileId] = { zipId: zipId, filePath: li.dataset.filePath };
            } else {
              delete checkedFiles[fileId];
            }
            updateContentView();
          });
          li.insertBefore(checkbox, li.firstChild);
          // File icon.
          let fileIcon = document.createElement('span');
          fileIcon.textContent = "📄 ";
          li.appendChild(fileIcon);
          // File name clickable for single file view.
          let nameSpan = document.createElement('span');
          nameSpan.textContent = key;
          nameSpan.addEventListener('click', function(e) {
            e.stopPropagation();
            document.querySelectorAll('#file-tree li.selected').forEach(el => el.classList.remove('selected'));
            li.classList.add('selected');
            selectedFile = { zipId: zipId, filePath: li.dataset.filePath };
            updateContentView();
          });
          li.appendChild(nameSpan);
        }
        // Recurse for children.
        if (isFolder) {
          let childUL = renderTree(node.__children, null, (pathPrefix ? pathPrefix : "") + key + '/', zipId);
          li.appendChild(childUL);
        }
        ul.appendChild(li);
      });
      if (container) {
        container.appendChild(ul);
      } else {
        return ul;
      }
    }

    // Modified loadFileContent: now accepts fileRef object {zipId, filePath}
    function loadFileContent(fileRef) {
      let zipObj = zipFiles.find(z => z.id == fileRef.zipId);
      if (!zipObj) {
        fileContentDiv.textContent = "Zip file not found!";
        return;
      }
      const fileObj = zipObj.zip.file(fileRef.filePath);
      if (!fileObj) {
        fileContentDiv.textContent = "File not found!";
        return;
      }
      // Clear previous content.
      fileContentDiv.innerHTML = "";
      // Determine file type.
      const ext = fileRef.filePath.split('.').pop().toLowerCase();
      if (["jpg", "jpeg", "png", "gif"].includes(ext)) {
        fileObj.async("base64").then(data => {
          const img = document.createElement("img");
          img.src = "data:" + getMimeType(ext) + ";base64," + data;
          fileContentDiv.appendChild(img);
        }).catch(err => {
          fileContentDiv.textContent = "Error loading image: " + err;
        });
      } else {
        fileObj.async("string").then(text => {
          var isParsed = false;
          if (ext === "json" || ext === "config") {
            try {
              const jsonData = JSON.parse(text);
              const transformed = renderOrcaSlicerUI(jsonData);
              const pretty = JSON.stringify(jsonData, null, 2);
              const splitView = createSplitView(transformed, pretty);
              fileContentDiv.innerHTML = "";
              fileContentDiv.appendChild(splitView);
              isParsed = true;
            } catch (e) {
              fileContentDiv.textContent = "Invalid JSON: " + e;
            }
          }
          if (!isParsed) {
            const transformed = render(text);
            const splitView = createSplitView(transformed, text);
            fileContentDiv.innerHTML = "";
            fileContentDiv.appendChild(splitView);
          }
        }).catch(err => {
          fileContentDiv.textContent = "Error loading file: " + err;
        });
      }
    }

    // New function: update content view based on checked vs. selected files.
    function updateContentView() {
      if (Object.keys(checkedFiles).length >= 2) {
        renderComparisonView();
      } else if (selectedFile) {
        loadFileContent(selectedFile);
      } else {
        fileContentDiv.textContent = "File content will appear here when you select a file.";
      }
    }

    // New function: Render comparison view for 2 or more checked files.
    function renderComparisonView() {
      const filesToCompare = Object.values(checkedFiles);
      let promises = filesToCompare.map(fileRef => {
        let zipObj = zipFiles.find(z => z.id == fileRef.zipId);
        if (!zipObj) return Promise.resolve(null);
        let fileObj = zipObj.zip.file(fileRef.filePath);
        if (!fileObj) return Promise.resolve(null);
        return fileObj.async("string").then(text => {
          try {
            return JSON.parse(text);
          } catch(e) {
            return null;
          }
        });
      });

      let fileColWidth;
      if (filesToCompare.length === 2) {
        fileColWidth = "30%";
      } else if (filesToCompare.length === 3) {
        fileColWidth = "25%";
      } else if (filesToCompare.length >= 4) {
        fileColWidth = "20%";
      } else {
        fileColWidth = "50%";
      }

      Promise.all(promises).then(contents => {
        // Create table for comparison.
        let table = document.createElement('table');
        table.style.borderCollapse = "collapse";
        ///table.style.width = "100%";
        table.style.tableLayout = "fixed";
        table.style.width = "100%";

        // Header row with file names.
        let headerRow = document.createElement('tr');
        let headerCell = document.createElement('th');
        headerCell.style.border = "1px solid #ccc";
        headerCell.style.padding = "4px";
        headerCell.textContent = "";
        headerRow.appendChild(headerCell);
        filesToCompare.forEach(fileRef => {
          let zipObj = zipFiles.find(z => z.id == fileRef.zipId);
          let th = document.createElement('th');
          th.style.border = "1px solid #ccc";
          th.style.padding = "4px";
          th.innerHTML = zipObj.name + "<br/>" + fileRef.filePath.split('/').pop();
          th.style.width = fileColWidth;
          th.style.whiteSpace = "nowrap";
          th.style.overflow = "hidden";
          th.style.textOverflow = "ellipsis";
          headerRow.appendChild(th);
        });
        table.appendChild(headerRow);
        // Iterate over OrcaSlicer UI structure.
        window.orcaSlicerUI.tabs.forEach(tab => {
          // Tab row.
          let tabRow = document.createElement('tr');
          let tabCell = document.createElement('td');
          tabCell.colSpan = filesToCompare.length + 1;
          tabCell.style.border = "1px solid #ccc";
          tabCell.style.padding = "4px";
          tabCell.style.fontWeight = "bold";
          tabCell.style.textDecoration = "underline";
          tabCell.style.textDecorationColor = "#009688";
          tabCell.textContent = tab.label;
          tabRow.appendChild(tabCell);
          table.appendChild(tabRow);
          // Process groups.
          tab.groups.forEach(group => {
            // Group row.
            let groupRow = document.createElement('tr');
            let groupCell = document.createElement('td');
            groupCell.colSpan = filesToCompare.length + 1;
            groupCell.style.border = "1px solid #ccc";
            groupCell.style.padding = "4px";
            groupCell.style.fontWeight = "bold";
            
            groupCell.style.paddingLeft = "1.5em";
            
            groupCell.textContent = group.label;
            groupRow.appendChild(groupCell);
            table.appendChild(groupRow);
            // Options in group.
            if (group.options && Array.isArray(group.options)) {
              group.options.forEach(option => {
                let key = option.key;
                let row = document.createElement('tr');
                let keyCell = document.createElement('td');
                keyCell.style.border = "1px solid #ccc";
                keyCell.style.padding = "4px";
                
                keyCell.style.paddingLeft = "3em";
                keyCell.style.width = "10em"; // fixed width for setting label
                keyCell.style.whiteSpace = "nowrap";
                keyCell.style.overflow = "hidden";
                keyCell.style.textOverflow = "ellipsis";

                keyCell.textContent = key;
                row.appendChild(keyCell);
                let values = filesToCompare.map(() => "");
                // Collect values from each file.
                values = filesToCompare.map((fileRef, index) => {
                  return contents[index] ? contents[index][key] : "";
                });
                let allSame = values.every(v => v === values[0]);
                values.forEach(val => {
                  let cell = document.createElement('td');
                  cell.style.border = "1px solid #ccc";
                  cell.style.padding = "4px";
                  
                  cell.style.whiteSpace = "nowrap";
                  cell.style.overflow = "hidden";
                  cell.style.textOverflow = "ellipsis";
                  cell.style.textAlign = "center";

                  cell.textContent = val;
                  if (!allSame) {
                    cell.style.color = "orange";
                  }
                  row.appendChild(cell);
                });
                table.appendChild(row);
              });
            }
            // Process group lines if present.
            if (group.lines && Array.isArray(group.lines)) {
              group.lines.forEach(line => {
                let lineHeaderRow = document.createElement('tr');
                let lineHeaderCell = document.createElement('td');
                lineHeaderCell.colSpan = filesToCompare.length + 1;
                lineHeaderCell.style.border = "1px solid #ccc";
                lineHeaderCell.style.padding = "4px";
                lineHeaderCell.style.fontWeight = "bold";
                
                ///lineHeaderCell.style.paddingLeft = "8em";
                lineHeaderCell.style.paddingLeft = "3em";
                lineHeaderCell.style.whiteSpace = "nowrap";
                lineHeaderCell.style.overflow = "hidden";
                lineHeaderCell.style.textOverflow = "ellipsis";
               
                lineHeaderCell.textContent = line.label + (line.description ? " - " + line.description : "");
                lineHeaderRow.appendChild(lineHeaderCell);
                table.appendChild(lineHeaderRow);
                line.options.forEach(option => {
                  let key = option.key;
                  let row = document.createElement('tr');
                  let keyCell = document.createElement('td');
                  keyCell.style.border = "1px solid #ccc";
                  keyCell.style.padding = "4px";
                  keyCell.style.paddingLeft = "10em";
                  keyCell.textContent = key;
                  row.appendChild(keyCell);
                  let values = filesToCompare.map((fileRef, index) => {
                    return contents[index] ? contents[index][key] : "";
                  });
                  let allSame = values.every(v => v === values[0]);
                  values.forEach(val => {
                    let cell = document.createElement('td');
                    cell.style.border = "1px solid #ccc";
                    cell.style.padding = "4px";
                    
                    cell.style.whiteSpace = "nowrap";
                    cell.style.overflow = "hidden";
                    cell.style.textOverflow = "ellipsis";
                    cell.style.textAlign = "center";

                    cell.textContent = val;
                    if (!allSame) {
                      cell.style.color = "orange";
                    }
                    row.appendChild(cell);
                  });
                  table.appendChild(row);
                });
              });
            }
          });
        });
        // Render table with scrollbars.
        fileContentDiv.innerHTML = "";
        let containerDiv = document.createElement('div');
        containerDiv.style.overflow = "auto";
        containerDiv.style.maxHeight = "100%";
        containerDiv.appendChild(table);
        fileContentDiv.appendChild(containerDiv);
      });
    }

    // Helper: return appropriate MIME type.
    function getMimeType(ext) {
      if (ext === "jpg" || ext === "jpeg") return "image/jpeg";
      if (ext === "png") return "image/png";
      if (ext === "gif") return "image/gif";
      return "application/octet-stream";
    }

    // Create a split view container with a draggable horizontal splitter.
    function createSplitView(topContent, bottomContent) {
      const container = document.createElement('div');
      container.id = "split-view";

      // Top pane.
      const topPane = document.createElement('div');
      topPane.id = "top-pane";
      topPane.style.flex = "1";
      topPane.style.overflow = "auto";
      if (typeof topContent === 'string') {
        topPane.innerHTML = topContent;
      } else {
        topPane.appendChild(topContent);
      }

      // Splitter.
      const splitter = document.createElement('div');
      splitter.id = "splitter";

      // Bottom pane.
      const bottomPane = document.createElement('div');
      bottomPane.id = "bottom-pane";
      bottomPane.style.flex = "1";
      bottomPane.style.overflow = "auto";
      if (typeof bottomContent === 'string') {
        const pre = document.createElement('pre');
        pre.textContent = bottomContent;
        bottomPane.appendChild(pre);
      } else {
        bottomPane.appendChild(bottomContent);
      }

      container.appendChild(topPane);
      container.appendChild(splitter);
      container.appendChild(bottomPane);

      splitter.addEventListener('mousedown', function(e) {
        e.preventDefault();
        let startY = e.clientY;
        let startTopHeight = topPane.getBoundingClientRect().height;
        function onMouseMove(e) {
          let dy = e.clientY - startY;
          let newTopHeight = startTopHeight + dy;
          if (newTopHeight < 50) newTopHeight = 50;
          topPane.style.flex = "0 0 " + newTopHeight + "px";
        }
        function onMouseUp() {
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        }
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      });

      return container;
    }

    // Modified load: fetch UI definition remains the same.
    document.addEventListener("DOMContentLoaded", () => {
      fetch("orcaslicer-ui.json")
        .then(response => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then(data => {
          window.orcaSlicerUI = data;
          console.log("UI definition loaded:", window.orcaSlicerUI);
        })
        .catch(error => {
          console.error("Error loading orcaslicer-ui.json:", error);
        });

      updateDropAreaGlow();
    });

    // New function: remove a zip file from the tree and memory.
    function removeZip(zipId) {
      zipFiles = zipFiles.filter(z => z.id != zipId);
      let node = document.querySelector(`li.zip-root[data-zip-id='${zipId}']`);
      if (node && node.parentNode) {
        node.parentNode.removeChild(node);
      }
      Object.keys(checkedFiles).forEach(key => {
        if (key.startsWith(zipId + ":")) {
          delete checkedFiles[key];
        }
      });
      if (selectedFile && selectedFile.zipId == zipId) {
        selectedFile = null;
      }
      updateContentView();
      updateDropAreaGlow();
    }

    // New render function that transforms data (for now, returns same content).
    function render(data) {
      if (typeof data === 'object') {
        return JSON.stringify(data, null, 2);
      }
      return data;
    }

    function renderOrcaSlicerUI(data) {
      if (typeof data === 'object') {
        data = JSON.stringify(data, null, 2);
      }
      
      const configData = JSON.parse(data);
      if (!window.orcaSlicerUI || !window.orcaSlicerUI.tabs) {
        console.error("UI definition (orcaSlicerUI) not loaded.");
        return "<div>Error: UI definition not available.</div>";
      }
      
      let html = '';
      window.orcaSlicerUI.tabs.forEach(tab => {
        let tabContent = '';
        tab.groups.forEach(group => {
          let groupContent = '';
          if (group.options && Array.isArray(group.options)) {
            group.options.forEach(option => {
              const key = option.key;
              if (configData.hasOwnProperty(key)) {
                groupContent += `<div class="option">
                  <span class="option-key">${key}:</span>
                  <span class="option-value">${configData[key]}</span>
                </div>`;
              }
            });
          }
          if (group.lines && Array.isArray(group.lines)) {
            group.lines.forEach(line => {
              let lineContent = '';
              line.options.forEach(option => {
                const key = option.key;
                if (configData.hasOwnProperty(key)) {
                  lineContent += `<div class="option">
                    <span class="option-key">${key}:</span>
                    <span class="option-value">${configData[key]}</span>
                  </div>`;
                }
              });
              if (lineContent) {
                groupContent += `<div class="line">
                  <div class="line-header">
                    <strong>${line.label}</strong>${line.description ? ` - <em>${line.description}</em>` : ""}
                  </div>
                  ${lineContent}
                </div>`;
              }
            });
          }
          if (groupContent) {
            tabContent += `<div class="group">
              <h3>${group.label}</h3>
              ${groupContent}
            </div>`;
          }
        });
        if (tabContent) {
          html += `<div class="tab">
            <h2 class="underline">${tab.label}</h2>
            ${tabContent}
          </div>`;
        }
      });
      return html;
    }

    function updateDropAreaGlow() {
      if (zipFiles.length === 0) {
        dropArea.classList.add(_pulseAnimation);
      } else {
        dropArea.classList.remove(_pulseAnimation);
      }

      console.log(zipFiles.length);
    }    
  </script>
</body>
</html>
