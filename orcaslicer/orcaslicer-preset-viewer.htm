<!DOCTYPE html>
<!--
Web page to help view contents of exported OrcaSlicer Preset contents (configuration settings),

RESOURCES:
- OrcaSlicer https://github.com/SoftFever/OrcaSlicer
- Convert OrcaSlicer GUI creation cpp code to JSON graph for transforming/rendering preset data.
  - https://chatgpt.com/share/67c785ed-8908-800b-8f8e-e4d7a12d994c 
- Chat to create Web Page with drag drop zip, content preview, etc...
  https://chatgpt.com/share/67c7db6a-29f8-800b-8ebb-5e7342dce81a
-->
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Zip File Explorer with Split View</title>
  <!-- Load Roboto font from Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
      
  <style>
    body {
      margin: 0;
      font-family: 'Roboto', sans-serif;
      height: 100vh;
      overflow: hidden;
    }
    #container {
      display: flex;
      height: 100%;
    }
    /* Sidebar styles */
    #sidebar {
      width: 300px;
      min-width: 25%;
      border-right: 1px solid #ccc;
      padding: 10px;
      box-sizing: border-box;
      overflow-y: auto;
    }
    #drop-area {
      border: 2px dashed #aaa;
      border-radius: 5px;
      padding: 20px;
      text-align: center;
      color: #666;
      margin-bottom: 10px;
    }
    /* File tree styles */
    #file-tree ul {
      list-style-type: none;
      padding-left: 20px;
      margin: 0;
    }
    #file-tree li {
      cursor: pointer;
      margin: 4px 0;
    }
    #file-tree li.folder::before {
      content: "📁 ";
    }
    #file-tree li.file::before {
      content: "📄 ";
    }
    #file-tree li.collapsed > ul {
      display: none;
    }
    #file-tree li.selected {
      background-color: #e0e0e0;
    }
    /* Main content area */
    #main {
      flex-grow: 1;
      padding: 10px;
      box-sizing: border-box;
      overflow: hidden;
    }
    #file-content {
      height: 100%;
      border: 1px solid #ddd;
      box-sizing: border-box;
    }
    /* Split view styles */
    #split-view {
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    #top-pane, #bottom-pane {
      overflow: auto;
    }
    #splitter {
      height: 5px;
      background: #ccc;
      cursor: row-resize;
    }
    #file-content pre {
      background: #f4f4f4;
      padding: 10px;
      margin: 0;
      border-radius: 4px;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    #file-content img {
      max-width: 100%;
      height: auto;
    }
    .underline {
      text-decoration: underline;
      text-decoration-color: #009688;
      text-decoration-thickness: 0.2em;  /* Medium thickness */
      text-underline-offset: 0.35em;      /* Adjust this value to lower the underline */
    }    
  </style>
</head>
<body>
  <div id="container">
    <!-- Sidebar: Drop area and file tree -->
    <div id="sidebar">
      <div id="drop-area">Drag &amp; drop a .zip or .3mf here.<br/>Within OrcaSlicer, select <i>File</i> menu => <i>Export</i> => <i>Export Preset Bundle</i></div>
      <div id="file-tree"></div>
    </div>
    <!-- Main content area -->
    <div id="main">
      <div id="file-content">
        File content will appear here when you select a file.
      </div>
    </div>
  </div>

  <!-- Include JSZip from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.7.1/jszip.min.js"></script>
  <script>
    let currentZip = null;

    // DOM references.
    const dropArea = document.getElementById('drop-area');
    const fileTreeDiv = document.getElementById('file-tree');
    const fileContentDiv = document.getElementById('file-content');

    // Prevent default behaviors for drag events.
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, e => {
        e.preventDefault();
        e.stopPropagation();
      });
    });

    // Highlight drop area on dragover.
    dropArea.addEventListener('dragover', () => {
      dropArea.style.backgroundColor = '#f0f0f0';
    });
    dropArea.addEventListener('dragleave', () => {
      dropArea.style.backgroundColor = '';
    });

    // Handle file drop.
    dropArea.addEventListener('drop', e => {
      dropArea.style.backgroundColor = '';
      const files = e.dataTransfer.files;
      if (files.length) {
        const file = files[0];
        /* Enable non .zip named files like orca_printer and .3mf
        if (!file.name.endsWith('.zip')) {
          alert("Please drop a ZIP file.");
          return;
        }
        */
        const reader = new FileReader();
        reader.onload = function(evt) {
          JSZip.loadAsync(evt.target.result)
            .then(zip => {
              currentZip = zip;
              // Build the file tree.
              const tree = buildFileTree(zip);
              fileTreeDiv.innerHTML = ""; // Clear existing tree
              renderTree(tree, fileTreeDiv, '');
            })
            .catch(err => {
              alert("Error reading ZIP file: " + err);
            });
        };
        reader.readAsArrayBuffer(file);
      }
    });

    // Build a nested tree object from the zip entries.
    function buildFileTree(zip) {
      const tree = {};
      Object.keys(zip.files).forEach(filePath => {
        const parts = filePath.split('/').filter(part => part);
        let current = tree;
        parts.forEach((part, index) => {
          if (!current[part]) {
            current[part] = { __children: {}, __file: null };
          }
          if (index === parts.length - 1) {
            current[part].__file = zip.files[filePath];
          }
          current = current[part].__children;
        });
      });
      return tree;
    }

    // Render the tree object as a nested list.
    function renderTree(tree, container, pathPrefix) {
      const ul = document.createElement('ul');
      Object.keys(tree).forEach(key => {
        const li = document.createElement('li');
        li.textContent = key;
        const node = tree[key];
        const isFolder = Object.keys(node.__children).length > 0;

        if (isFolder) {
          li.classList.add('folder');
          li.addEventListener('click', function(e) {
            e.stopPropagation();
            li.classList.toggle('collapsed');
          });
        } else if (node.__file && !node.__file.dir) {
          li.classList.add('file');
          li.dataset.filePath = (pathPrefix ? pathPrefix : "") + key;
          li.addEventListener('click', function(e) {
            e.stopPropagation();
            document.querySelectorAll('#file-tree li.selected')
              .forEach(el => el.classList.remove('selected'));
            li.classList.add('selected');
            loadFileContent(li.dataset.filePath);
          });
        }

        if (isFolder) {
          const childUl = renderTree(node.__children, null, (pathPrefix ? pathPrefix : "") + key + '/');
          li.appendChild(childUl);
        }
        ul.appendChild(li);
      });
      if (container) {
        container.appendChild(ul);
      } else {
        return ul;
      }
    }


 // Create a split view container with a draggable horizontal splitter.
 function createSplitView(topContent, bottomContent) {
      const container = document.createElement('div');
      container.id = "split-view";

      // Top pane.
      const topPane = document.createElement('div');
      topPane.id = "top-pane";
      topPane.style.flex = "1";
      topPane.style.overflow = "auto";
      // If topContent is a string, set it as innerHTML so it renders as HTML.
      if (typeof topContent === 'string') {
        topPane.innerHTML = topContent;
      } else {
        topPane.appendChild(topContent);
      }

      // Splitter.
      const splitter = document.createElement('div');
      splitter.id = "splitter";

      // Bottom pane.
      const bottomPane = document.createElement('div');
      bottomPane.id = "bottom-pane";
      bottomPane.style.flex = "1";
      bottomPane.style.overflow = "auto";
      // For bottom pane, keep using a <pre> element for prettified text.
      if (typeof bottomContent === 'string') {
        const pre = document.createElement('pre');
        pre.textContent = bottomContent;
        bottomPane.appendChild(pre);
      } else {
        bottomPane.appendChild(bottomContent);
      }

      container.appendChild(topPane);
      container.appendChild(splitter);
      container.appendChild(bottomPane);

      // Drag functionality for the splitter.
      splitter.addEventListener('mousedown', function(e) {
        e.preventDefault();
        let startY = e.clientY;
        let startTopHeight = topPane.getBoundingClientRect().height;
        function onMouseMove(e) {
          let dy = e.clientY - startY;
          let newTopHeight = startTopHeight + dy;
          if (newTopHeight < 50) newTopHeight = 50; // minimum height
          topPane.style.flex = "0 0 " + newTopHeight + "px";
        }
        function onMouseUp() {
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        }
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      });

      return container;
    }

    // Load and display the content of the selected file.
    function loadFileContent(filePath) {
      if (!currentZip) return;
      const fileObj = currentZip.file(filePath);
      if (!fileObj) {
        fileContentDiv.textContent = "File not found!";
        return;
      }

      // Clear previous content.
      fileContentDiv.innerHTML = "";

      // Determine file type.
      const ext = filePath.split('.').pop().toLowerCase();
      if (["jpg", "jpeg", "png", "gif"].includes(ext)) {
        // For images: load as base64 and render an <img>.
        fileObj.async("base64").then(data => {
          const img = document.createElement("img");
          img.src = "data:" + getMimeType(ext) + ";base64," + data;
          fileContentDiv.appendChild(img);
        }).catch(err => {
          fileContentDiv.textContent = "Error loading image: " + err;
        });
      } else {
        // For JSON or other string content: load as string.
        fileObj.async("string").then(text => {
          var isParsed = false;
          if (ext === "json" || ext === "config") {
            try {
              const jsonData = JSON.parse(text);
              const transformed = renderOrcaSlicerUI(jsonData);
              const pretty = JSON.stringify(jsonData, null, 2);
              const splitView = createSplitView(transformed, pretty);
              fileContentDiv.innerHTML = "";
              fileContentDiv.appendChild(splitView);
              isParsed = true;
            } catch (e) {
              fileContentDiv.textContent = "Invalid JSON: " + e;
            }
          }

          if (!isParsed) {
            // For plain text files, show the same split view with raw text.
            const transformed = render(text);
            const splitView = createSplitView(transformed, text);
            fileContentDiv.innerHTML = "";
            fileContentDiv.appendChild(splitView);
          }
        }).catch(err => {
          fileContentDiv.textContent = "Error loading file: " + err;
        });
      }
    }

    // Helper: return appropriate MIME type.
    function getMimeType(ext) {
      if (ext === "jpg" || ext === "jpeg") return "image/jpeg";
      if (ext === "png") return "image/png";
      if (ext === "gif") return "image/gif";
      return "application/octet-stream";
    }

    document.addEventListener("DOMContentLoaded", () => {
      fetch("orcaslicer-ui.json")
        .then(response => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then(data => {
          window.orcaSlicerUI = data;
          console.log("UI definition loaded:", window.orcaSlicerUI);
        })
        .catch(error => {
          console.error("Error loading orcaslicer-ui.json:", error);
        });
    });


    // New render function that transforms data (for now, returns same content).
    function render(data) {
      if (typeof data === 'object') {
        return JSON.stringify(data, null, 2);
      }
      return data;
    }

    function renderOrcaSlicerUI(data) {
      if (typeof data === 'object') {
        data = JSON.stringify(data, null, 2);
      }
      
      // Parse the configuration JSON (flat key/value pairs)
      const configData = JSON.parse(data);

      // Assume the UI definition is loaded globally (from orcaslicer-ui.json)
      // For example, window.orcaSlicerUI = { tabs: [...] }
      if (!window.orcaSlicerUI || !window.orcaSlicerUI.tabs) {
        console.error("UI definition (orcaSlicerUI) not loaded.");
        return "<div>Error: UI definition not available.</div>";
      }
      
      let html = '';

      // Iterate over each tab in the UI definition
      window.orcaSlicerUI.tabs.forEach(tab => {
        let tabContent = '';

        // Process each group (or option group) in the tab
        tab.groups.forEach(group => {
          let groupContent = '';

          // Process the group's plain options
          if (group.options && Array.isArray(group.options)) {
            group.options.forEach(option => {
              const key = option.key;
              if (configData.hasOwnProperty(key)) {
                // Render option key and value; additional UI properties (e.g., full_width, is_code) can be used to alter styling.
                groupContent += `<div class="option">
                  <span class="option-key">${key}:</span>
                  <span class="option-value">${configData[key]}</span>
                </div>`;
              }
            });
          }

          // Process grouped "lines" if they exist (e.g. Overhang speed groupings)
          if (group.lines && Array.isArray(group.lines)) {
            group.lines.forEach(line => {
              let lineContent = '';
              line.options.forEach(option => {
                const key = option.key;
                if (configData.hasOwnProperty(key)) {
                  lineContent += `<div class="option">
                    <span class="option-key">${key}:</span>
                    <span class="option-value">${configData[key]}</span>
                  </div>`;
                }
              });
              if (lineContent) {
                groupContent += `<div class="line">
                  <div class="line-header">
                    <strong>${line.label}</strong>${line.description ? ` - <em>${line.description}</em>` : ""}
                  </div>
                  ${lineContent}
                </div>`;
              }
            });
          }

          // Only add the group if at least one option was rendered
          if (groupContent) {
            tabContent += `<div class="group">
              <h3>${group.label}</h3>
              ${groupContent}
            </div>`;
          }
        });

        // Only add the tab if at least one group was rendered
        if (tabContent) {
          html += `<div class="tab">
            <h2 class="underline">${tab.label}</h2>
            ${tabContent}
          </div>`;
        }
      });

      return html;
    }


</script>
</body>
</html>
