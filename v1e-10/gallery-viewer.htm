<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>QR Code Explosion Demo â€“ Refined with Rate Limiting & Project Image Adjustments</title>
  <style>
    body { margin: 0; overflow: hidden; background: #fff; }
    canvas { display: block; }
  </style>
</head>
<body>
  <canvas id="logoCanvas"></canvas>
  <script>
    // ---------- TUNING / MAGIC CONSTANTS ----------
    // Filenames:
    const LOGO_FILENAME = 'logo.png';
    const QR_FILENAME = 'qr.png';
    const PROJECT_FILENAME = 'project.jpeg';

    // Layout / Canvas:
    const TICKER_HEIGHT = 150; // Height (in px) for the bottom ticker area

    // Physics constants:
    const GRAVITY = 0.3;                // Gravity acceleration per frame
    const BOUNCE_DAMPING = 0.6;         // Dampening on bounce
    const HORIZONTAL_FRICTION = 0.98;   // Friction applied to horizontal velocity each frame
    const VELOCITY_THRESHOLD = 0.5;     // Below this velocity, consider the tile stopped

    // Tessellation:
    const TILE_BASE_SIZE = 8;           // Size of each tile block (in pixels)
    const ALPHA_THRESHOLD = 50;         // Minimum alpha (0-255) needed from the block for a tile

    // QR Tile Sizing:
    const BASE_MAX_QR_SIZE = 30;        // Base max size (old value)
    const FINAL_QR_MULTIPLIER = 4;      // Multiplier used to interpolate QR tile size
    const FINAL_QR_SIZE = BASE_MAX_QR_SIZE * FINAL_QR_MULTIPLIER; // Final size before scaling project image
    const FINAL_QR_MULTIPLIER_NEW = 4;  // Increase final size of QR tiles by 4x (as requested)

    // Tile count / fade:
    const TILE_MAX_COUNT = 30;          // Maximum number of active QR tiles allowed
    let currentTileCount = 0;           // Global counter for active QR tiles
    const FADE_OUT_RATE = 0.01;         // Fade-out rate per frame for landed QR tiles
    const DUST_FADE_DURATION = 120;     // Frames for Dust tile fade-out (~2 seconds at 60fps)

    // Project Image (landing) constants:
    const PROJECT_IMAGE_FINAL_MULTIPLIER = 3; // Final project image = 3x final QR tile size (was 4x)
    const PROJECT_IMAGE_OVERSHOOT = 1.2;        // Overshoot factor (20% larger before settling)
    const PROJECT_IMAGE_ANIMATION_DURATION = 60; // Frames for the spring animation
    const PROJECT_IMAGE_CORNER_RADIUS = 10;     // Medium corner radius for project image

    // Explosion trigger radius (in pixels)
    const EXPLOSION_TRIGGER_RADIUS = 10;
    // QR tile birth rate limiting (in ms)
    const QR_BIRTH_RATE = 200;
    let lastQRBirthTime = 0;

    // ---------- SETUP CANVAS & ASSETS ----------
    const canvas = document.getElementById('logoCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Load images
    const logoImg = new Image();   logoImg.src = LOGO_FILENAME;
    const qrImg = new Image();       qrImg.src = QR_FILENAME;
    const projectImg = new Image(); projectImg.src = PROJECT_FILENAME;

    // Offscreen canvas for the scaled logo overlay
    const scaledLogoCanvas = document.createElement('canvas');
    const scaledLogoCtx = scaledLogoCanvas.getContext('2d');

    // Global logo positioning and tile array
    let logoXOffset = 0, logoYOffset = 0;
    let tiles = [];
    let assetsLoaded = 0;
    function onAssetLoaded() {
      assetsLoaded++;
      if (assetsLoaded === 3) { initLogo(); }
    }
    logoImg.onload = onAssetLoaded;
    qrImg.onload = onAssetLoaded;
    projectImg.onload = onAssetLoaded;

    // ---------- INITIALIZATION & TESSELLATION ----------
    function initLogo() {
      // Scale logo to 90% of the window width (maintaining aspect ratio)
      const scaleFactor = (window.innerWidth * 0.9) / logoImg.width;
      const scaledWidth = Math.round(logoImg.width * scaleFactor);
      const scaledHeight = Math.round(logoImg.height * scaleFactor);
      scaledLogoCanvas.width = scaledWidth;
      scaledLogoCanvas.height = scaledHeight;
      scaledLogoCtx.drawImage(logoImg, 0, 0, scaledWidth, scaledHeight);
      // Position logo roughly in the top 1/3 (centered horizontally)
      logoXOffset = (canvas.width - scaledWidth) / 2;
      logoYOffset = canvas.height / 20;

      // Get pixel data from the scaled logo and tessellate in blocks.
      const imageData = scaledLogoCtx.getImageData(0, 0, scaledWidth, scaledHeight);
      const data = imageData.data;
      for (let y = 0; y < scaledHeight; y += TILE_BASE_SIZE) {
        for (let x = 0; x < scaledWidth; x += TILE_BASE_SIZE) {
          // Compute max alpha in the TILE_BASE_SIZE block
          let maxAlpha = 0;
          for (let dy = 0; dy < TILE_BASE_SIZE; dy++) {
            for (let dx = 0; dx < TILE_BASE_SIZE; dx++) {
              const px = x + dx, py = y + dy;
              if (px >= scaledWidth || py >= scaledHeight) continue;
              const index = ((py * scaledWidth) + px) * 4;
              const alpha = data[index + 3];
              if (alpha > maxAlpha) { maxAlpha = alpha; }
            }
          }
          if (maxAlpha >= ALPHA_THRESHOLD) {
            tiles.push({
              originalX: logoXOffset + x,
              originalY: logoYOffset + y,
              x: logoXOffset + x,
              y: logoYOffset + y,
              baseSize: TILE_BASE_SIZE,
              vx: 0, vy: 0,
              exploded: false,
              type: null,        // Will be set to "QR" or "Dust" upon explosion
              overlayAlpha: 1,   // For the overlay drawn from the logo
              fullAlpha: 1,      // Overall opacity (for fade-out)
              landed: false,     // True when nearly stopped in ticker area
              landing: false,    // True when starting landing state (for QR tiles)
              projectAnimTime: 0,// Timer for project image spring animation
              dustLife: 0        // For dust tiles: remaining life in frames
            });
          }
        }
      }
      // Initially render the tiled logo (using the overlay only)
      drawTiles();
    }

    // ---------- EVENT LISTENERS ----------
    canvas.addEventListener('click', function(e) {
      const rect = canvas.getBoundingClientRect();
      triggerExplosion(e.clientX - rect.left, e.clientY - rect.top);
    });
    canvas.addEventListener('mousemove', function(e) {
      const rect = canvas.getBoundingClientRect();
      triggerExplosion(e.clientX - rect.left, e.clientY - rect.top);
    });

    // Trigger explosion for tiles near the pointer.
    function triggerExplosion(mouseX, mouseY) {
      let triggered = false;
      const now = Date.now();
      tiles.forEach(tile => {
        if (!tile.exploded) {
          const tileCenterX = tile.x + tile.baseSize / 2;
          const tileCenterY = tile.y + tile.baseSize / 2;
          const dx = tileCenterX - mouseX;
          const dy = tileCenterY - mouseY;
          if (Math.sqrt(dx * dx + dy * dy) < EXPLOSION_TRIGGER_RADIUS) {
            tile.exploded = true;
            // Rate-limit QR tile births: allow only if 100ms has passed.
            if (currentTileCount < TILE_MAX_COUNT && (now - lastQRBirthTime >= QR_BIRTH_RATE)) {
              tile.type = "QR";
              currentTileCount++;
              lastQRBirthTime = now;
            } else {
              tile.type = "Dust";
              tile.dustLife = DUST_FADE_DURATION;
            }
            // Give tile an initial push away from the pointer.
            const angle = Math.atan2(dy, dx) + (Math.random() - 0.5) * 0.5;
            const speed = Math.random() * 3 + 2;
            tile.vx = Math.cos(angle) * speed;
            tile.vy = Math.sin(angle) * speed;
            triggered = true;
          }
        }
      });
      if (triggered) { requestAnimationFrame(animate); }
    }

    // ---------- ANIMATION LOOP ----------
    function animate() {
      let animating = false;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      // Update each tile; remove fully faded ones.
      tiles = tiles.filter(tile => {
        if (tile.exploded) {
          // Apply physics: gravity & horizontal friction.
          tile.vy += GRAVITY;
          tile.vx *= HORIZONTAL_FRICTION;
          tile.x += tile.vx;
          tile.y += tile.vy;

          // Compute current size:
          let size;
          if (tile.type === "QR") {
            // Interpolate size from base to final QR size.
            const tickerBoundary = canvas.height - TICKER_HEIGHT;
            const progress = Math.min(1, (tile.y - tile.originalY) / (tickerBoundary - tile.originalY));
            size = tile.baseSize + progress * (FINAL_QR_SIZE - tile.baseSize);
          } else { // Dust tiles remain constant.
            size = tile.baseSize;
          }

          // Bounce off left/right edges.
          if (tile.x < 0) { tile.x = 0; tile.vx = -tile.vx * BOUNCE_DAMPING; }
          if (tile.x + size > canvas.width) { tile.x = canvas.width - size; tile.vx = -tile.vx * BOUNCE_DAMPING; }
          // Bounce off the ticker floor.
          const tickerBoundary = canvas.height - TICKER_HEIGHT;
          if (tile.y + size > tickerBoundary) {
            tile.y = tickerBoundary - size;
            tile.vy = -tile.vy * BOUNCE_DAMPING;
            if (tile.type === "QR") {
              // Start landing state as soon as the tile bounces.
              if (!tile.landing) {
                tile.landing = true;
                tile.projectAnimTime = 0;
              }
              // If velocities are minimal, mark the tile as landed.
              if (Math.abs(tile.vx) < VELOCITY_THRESHOLD && Math.abs(tile.vy) < VELOCITY_THRESHOLD) {
                tile.landed = true;
              }
            }
          }
          // For QR tiles: once landed, continue fading out.
          if (tile.type === "QR" && tile.landed) {
            tile.fullAlpha -= FADE_OUT_RATE;
          } else if (tile.type === "Dust") {
            // Dust tiles fade away over a fixed duration.
            tile.dustLife--;
            tile.fullAlpha = tile.dustLife / DUST_FADE_DURATION;
          }
          // Increment project image animation time for QR tiles in landing state.
          if (tile.type === "QR" && tile.landing) {
            if (tile.projectAnimTime < PROJECT_IMAGE_ANIMATION_DURATION) { tile.projectAnimTime++; }
          }
          if (!tile.landed || tile.fullAlpha > 0) { animating = true; }
        }
        drawTile(tile);
        // Remove tiles that have completely faded.
        return tile.fullAlpha > 0;
      });
      if (animating) { requestAnimationFrame(animate); }
    }

    // ---------- DRAWING FUNCTION ----------
    function drawTile(tile) {
      let size;
      if (tile.exploded && tile.type === "QR") {
        const tickerBoundary = canvas.height - TICKER_HEIGHT;
        const progress = Math.min(1, (tile.y - tile.originalY) / (tickerBoundary - tile.originalY));
        size = tile.baseSize + progress * (FINAL_QR_SIZE - tile.baseSize);
      } else if (tile.exploded && tile.type === "Dust") {
        size = tile.baseSize;
      } else {
        size = tile.baseSize; // For non-exploded, use base size.
      }

      ctx.save();
      ctx.globalAlpha = tile.fullAlpha;

      if (!tile.exploded) {
        // Draw overlay tile from the logo so that the logo appears intact.
        const srcX = tile.originalX - logoXOffset;
        const srcY = tile.originalY - logoYOffset;
        ctx.drawImage(scaledLogoCanvas, srcX, srcY, tile.baseSize, tile.baseSize,
                      tile.x, tile.y, size, size);
      } else {
        if (tile.type === "QR") {
          // If in landing state, animate and draw the project image behind the QR tile.
          if (tile.landing) {
            const finalQRSize = FINAL_QR_SIZE;
            const projectFinalSize = finalQRSize * PROJECT_IMAGE_FINAL_MULTIPLIER;
            let t = tile.projectAnimTime / PROJECT_IMAGE_ANIMATION_DURATION;
            t = Math.min(1, t);
            // Simple spring effect: overshoot then settle.
            const currentProjectSize = projectFinalSize * (1 + (PROJECT_IMAGE_OVERSHOOT - 1) * Math.sin(Math.PI * t) * Math.exp(-3 * t));
            // Position project image so its bottom right aligns with the QR tile.
            const projX = tile.x + finalQRSize - currentProjectSize;
            const projY = tile.y + finalQRSize - currentProjectSize;
            drawRoundedImage(ctx, projectImg, projX, projY, currentProjectSize, currentProjectSize, PROJECT_IMAGE_CORNER_RADIUS);
          }
          // Draw the QR tile.
          ctx.drawImage(qrImg, tile.x, tile.y, size, size);
          // Overlay the original logoâ€™s section (fading out).
          const srcX = tile.originalX - logoXOffset;
          const srcY = tile.originalY - logoYOffset;
          ctx.globalAlpha = tile.fullAlpha * tile.overlayAlpha;
          ctx.drawImage(scaledLogoCanvas, srcX, srcY, tile.baseSize, tile.baseSize,
                        tile.x, tile.y, size, size);
        } else if (tile.type === "Dust") {
          // Draw Dust tile as a constant-sized QR tile.
          ctx.drawImage(qrImg, tile.x, tile.y, size, size);
        }
      }
      ctx.restore();
    }

    // ---------- UTILITY FUNCTIONS ----------
    // Draw an image with rounded corners.
    function drawRoundedImage(ctx, image, x, y, width, height, radius) {
      ctx.save();
      ctx.beginPath();
      roundedRect(ctx, x, y, width, height, radius);
      ctx.clip();
      ctx.drawImage(image, x, y, width, height);
      ctx.restore();
    }
    // Create a rounded rectangle path.
    function roundedRect(ctx, x, y, width, height, radius) {
      ctx.moveTo(x + radius, y);
      ctx.lineTo(x + width - radius, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
      ctx.lineTo(x + width, y + height - radius);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      ctx.lineTo(x + radius, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
      ctx.lineTo(x, y + radius);
      ctx.quadraticCurveTo(x, y, x + radius, y);
      ctx.closePath();
    }
    function drawTiles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      tiles.forEach(tile => { drawTile(tile); });
    }
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      drawTiles();
    });
  </script>
</body>
</html>
